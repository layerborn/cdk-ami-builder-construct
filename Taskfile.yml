version: 3

tasks:
  Bootstrap:
    desc: "Bootstrap the project"
    env:
      STACK_NAME: CDKToolkitTests
      STACK_QUALIFIER: tests
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        if [[ -x "AWS_REGION" ]]; then
          echo "AWS_REGION is not set.  Exiting."
          exit 1
        fi
        yarn cdk bootstrap $AWS_ACCOUNT/$AWS_REGION  --toolkit-stack-name $STACK_NAME --qualifier $STACK_QUALIFIER --cloudformation-execution-policies $EXECUTION_POLICY
  Bootstrap-Next:
    desc: |
      Bootstrap the project with ability to be assumed by first account.  This is 
      necessary for AMI sharing.
    env:
      STACK_NAME: CDKToolkitTests
      STACK_QUALIFIER: tests
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        if [[ -x "AWS_REGION" ]]; then
          echo "AWS_REGION is not set.  Exiting."
          exit 1
        fi
        yarn cdk bootstrap $AWS_ACCOUNT/$AWS_REGION --trust-for-lookup $TRUST_ACCOUNTS --trust $TRUST_ACCOUNTS  --toolkit-stack-name $STACK_NAME --qualifier $STACK_QUALIFIER --cloudformation-execution-policies $EXECUTION_POLICY
  Run-Cdk:
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        yarn cdk {{ .CLI_ARGS }}

  Deploy-TestStack:
    desc: "Deploy TestStack"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen pre-compile && yarn cdk deploy ImageBuildTestStack --require-approval never
  Diff-TestStack:
    desc: "Diff TestStack"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen pre-compile && yarn cdk diff ImageBuildTestStack --require-approval never

  Destroy-TestStack:
    desc: "Destroy CustomResource-TestStack"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        yarn cdk destroy ImageBuildTestStack --require-approval never
  Deploy-TestStack-Distribution:
    desc: "Deploy TestStack-Distribution"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
         # Environment variables are empty, means running locally
         export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
         export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
         export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
         export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
         # Environment variables are not empty so we are running in GitHub Actions
         echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen pre-compile && yarn cdk deploy ImageBuildShareImagesTestStack --require-approval never
  Diff-TestStack-Distribution:
    desc: "Diff TestStack-Distribution"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
         # Environment variables are empty, means running locally
         export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
         export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
         export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
         export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
         # Environment variables are not empty so we are running in GitHub Actions
         echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen pre-compile && yarn cdk diff ImageBuildShareImagesTestStack --require-approval never
  Destroy-TestStack-Distribution:
    desc: "Destroy TestStack-Distribution"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
         # Environment variables are empty, means running locally
         export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
         export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
         export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
         export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
         # Environment variables are not empty so we are running in GitHub Actions
         echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen pre-compile && yarn cdk destroy ImageBuildShareImagesTestStack --require-approval never
  Synth-TestStack-Distribution:
    desc: "Synth TestStack-Distribution.  --quiet is used to suppress the output of the synth command."
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
         # Environment variables are empty, means running locally
         export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
         export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
         export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
         export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
         # Environment variables are not empty so we are running in GitHub Actions
         echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen pre-compile && yarn cdk synth ImageBuildShareImagesTestStack {{ .CLI_ARGS }}

  Run-Unit-Tests:
    desc: "Run unit tests"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
         # Environment variables are empty, means running locally
         export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
         export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
         export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
         export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
         # Environment variables are not empty so we are running in GitHub Actions
         echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen test
  Build:
    desc: "Build Project"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
         # Environment variables are empty, means running locally
         export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
         export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
         export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
         export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
         # Environment variables are not empty so we are running in GitHub Actions
         echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
        npx projen build
  Create-Service-Linked-Role:
    desc: |
      Create Service Linked Role - to see how to share AMIs across accounts, see:
      https://docs.aws.amazon.com/imagebuilder/latest/userguide/cr-upd-ami-distribution-settings.html
      and 
      https://docs.aws.amazon.com/imagebuilder/latest/userguide/cross-account-dist.html
      Also recommend checking out the documentation for sharing with orgs:
      https://docs.aws.amazon.com/imagebuilder/latest/userguide/manage-shared-resources.html
    cmds:
      - |
        aws iam create-service-linked-role --aws-service-name imagebuilder.amazonaws.com
  Full-Regression-TestStack-Distribution:
    desc: "Full Regression TestStack-Distribution"
    cmds:
      - |
        if [[ -z "$AWS_ACCESS_KEY_ID" ]] || [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          # Environment variables are empty, means running locally
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
        else
          # Environment variables are not empty so we are running in GitHub Actions
          echo "AWS Environment variables are not empty.  Proceeding."
        fi
        echo "Checking current user identity"
        aws sts get-caller-identity --output text
